
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_node 'v =
    | C_Node 'v (Core_Option_Option_Type.t_option (t_node 'v))
    
  let function node_next (self : t_node 'v) : Core_Option_Option_Type.t_option (t_node 'v)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ a -> a
      end
  let function node_v (self : t_node 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node a _ -> a
      end
end
module CargoDir_Impl0_LenLogic_Stub
  type v
  use prelude.Int
  use CargoDir_Node_Type as CargoDir_Node_Type
  function len_logic [#"/root/milli/creusot/cargo-dir/src/lib.rs" 25 4 25 38] (self : CargoDir_Node_Type.t_node v) : int
end
module CargoDir_Impl0_LenLogic_Interface
  type v
  use prelude.Int
  use CargoDir_Node_Type as CargoDir_Node_Type
  function len_logic [#"/root/milli/creusot/cargo-dir/src/lib.rs" 25 4 25 38] (self : CargoDir_Node_Type.t_node v) : int
  val len_logic [#"/root/milli/creusot/cargo-dir/src/lib.rs" 25 4 25 38] (self : CargoDir_Node_Type.t_node v) : int
    ensures { result = len_logic self }
    
end
module CargoDir_Impl0_LenLogic
  type v
  use prelude.Int
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function len_logic [#"/root/milli/creusot/cargo-dir/src/lib.rs" 25 4 25 38] (self : CargoDir_Node_Type.t_node v) : int
   =
    [#"/root/milli/creusot/cargo-dir/src/lib.rs" 24 4 24 12] let CargoDir_Node_Type.C_Node _ next = self in 1 + match (next) with
      | Core_Option_Option_Type.C_Some next -> len_logic next
      | Core_Option_Option_Type.C_None -> 0
      end
  val len_logic [#"/root/milli/creusot/cargo-dir/src/lib.rs" 25 4 25 38] (self : CargoDir_Node_Type.t_node v) : int
    ensures { result = len_logic self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/root/creusot/creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CargoDir_Impl1_ShallowModel_Stub
  type v
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 51 4 51 36] (self : CargoDir_Node_Type.t_node v) : Seq.seq v
    
end
module CargoDir_Impl1_ShallowModel_Interface
  type v
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 51 4 51 36] (self : CargoDir_Node_Type.t_node v) : Seq.seq v
    
  val shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 51 4 51 36] (self : CargoDir_Node_Type.t_node v) : Seq.seq v
    ensures { result = shallow_model self }
    
end
module CargoDir_Impl1_ShallowModel
  type v
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 51 4 51 36] (self : CargoDir_Node_Type.t_node v) : Seq.seq v
    
   =
    [#"/root/milli/creusot/cargo-dir/src/lib.rs" 52 8 58 9] let CargoDir_Node_Type.C_Node v next = self in Seq.(++) (Seq.singleton v) (match (next) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some node -> shallow_model node
      end)
  val shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 51 4 51 36] (self : CargoDir_Node_Type.t_node v) : Seq.seq v
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Stub
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Interface
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/root/creusot/creusot-contracts/src/std/boxed.rs" 20 8 20 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CargoDir_Impl0_New_Interface
  type v
  use seq.Seq
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use CargoDir_Node_Type as CargoDir_Node_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = CargoDir_Node_Type.t_node v
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CargoDir_Impl1_ShallowModel_Stub as ShallowModel0 with
    type v = v
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = v
  val new [#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 4 39 52] (v : v) (next : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)) : CargoDir_Node_Type.t_node v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 11 39 12] Inv0.inv v}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 17 39 21] Inv1.inv next}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 35 4 38 9] Seq.(==) (ShallowModel0.shallow_model result) (Seq.(++) (Seq.singleton v) (match (next) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some n -> ShallowModel1.shallow_model n
      end)) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 48 39 52] Inv2.inv result }
    
end
module CargoDir_Impl0_New
  type v
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = CargoDir_Node_Type.t_node v
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = v,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CargoDir_Impl1_ShallowModel as ShallowModel0 with
    type v = v
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel1 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg new [#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 4 39 52] [@cfg:stackify] [@cfg:subregion_analysis] (v : v) (next : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)) : CargoDir_Node_Type.t_node v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 11 39 12] Inv0.inv v}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 17 39 21] Inv1.inv next}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 35 4 38 9] Seq.(==) (ShallowModel0.shallow_model result) (Seq.(++) (Seq.singleton v) (match (next) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some n -> ShallowModel1.shallow_model n
      end)) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 39 48 39 52] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CargoDir_Node_Type.t_node v;
  var v : v = v;
  var next : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v) = next;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _0 <- CargoDir_Node_Type.C_Node v next;
    v <- any v;
    next <- any Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CargoDir_LinkedList_Type
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_linkedlist 'v =
    | C_LinkedList (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node 'v))
    
  let function linkedlist_head (self : t_linkedlist 'v) : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node 'v)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_LinkedList a -> a
      end
end
module CargoDir_Impl2_ShallowModel_Stub
  type v
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 70 4 70 50] (self : CargoDir_LinkedList_Type.t_linkedlist v) : Seq.seq v
    
end
module CargoDir_Impl2_ShallowModel_Interface
  type v
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 70 4 70 50] (self : CargoDir_LinkedList_Type.t_linkedlist v) : Seq.seq v
    
  val shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 70 4 70 50] (self : CargoDir_LinkedList_Type.t_linkedlist v) : Seq.seq v
    ensures { result = shallow_model self }
    
end
module CargoDir_Impl2_ShallowModel
  type v
  use seq.Seq
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use CargoDir_Node_Type as CargoDir_Node_Type
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  function shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 70 4 70 50] (self : CargoDir_LinkedList_Type.t_linkedlist v) : Seq.seq v
    
   =
    [#"/root/milli/creusot/cargo-dir/src/lib.rs" 72 12 75 13] match (CargoDir_LinkedList_Type.linkedlist_head self) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some node -> ShallowModel0.shallow_model node
      end
  val shallow_model [#"/root/milli/creusot/cargo-dir/src/lib.rs" 70 4 70 50] (self : CargoDir_LinkedList_Type.t_linkedlist v) : Seq.seq v
    ensures { result = shallow_model self }
    
end
module CargoDir_Impl3_New_Interface
  type v
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone CargoDir_Impl2_ShallowModel_Stub as ShallowModel0 with
    type v = v
  val new [#"/root/milli/creusot/cargo-dir/src/lib.rs" 88 4 88 24] (_1 : ()) : CargoDir_LinkedList_Type.t_linkedlist v
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 87 14 87 40] ShallowModel0.shallow_model result = Seq.empty  }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 88 20 88 24] Inv0.inv result }
    
end
module CargoDir_Impl3_New
  type v
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CargoDir_Impl1_ShallowModel as ShallowModel2 with
    type v = v
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel1 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CargoDir_Impl2_ShallowModel as ShallowModel0 with
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg new [#"/root/milli/creusot/cargo-dir/src/lib.rs" 88 4 88 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : CargoDir_LinkedList_Type.t_linkedlist v
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 87 14 87 40] ShallowModel0.shallow_model result = Seq.empty  }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 88 20 88 24] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CargoDir_LinkedList_Type.t_linkedlist v;
  {
    goto BB0
  }
  BB0 {
    _0 <- CargoDir_LinkedList_Type.C_LinkedList (Core_Option_Option_Type.C_None);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/root/creusot/creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/root/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Core_Option_Impl0_Take_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Core_Option_Option_Type.t_option t)
  val take (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option t
    requires {[#"/rustc/5bd28f5eac1ba3569bfa8d49ec3f5acbdfdff7a0/library/core/src/option.rs" 1695 27 1695 31] Inv0.inv self}
    ensures { [#"/root/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] result =  * self /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"/rustc/5bd28f5eac1ba3569bfa8d49ec3f5acbdfdff7a0/library/core/src/option.rs" 1695 4 1695 45] Inv1.inv result }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"/root/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {[#"/rustc/5bd28f5eac1ba3569bfa8d49ec3f5acbdfdff7a0/library/core/src/option.rs" 932 24 932 28] Inv0.inv self}
    ensures { [#"/root/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { [#"/rustc/5bd28f5eac1ba3569bfa8d49ec3f5acbdfdff7a0/library/core/src/option.rs" 932 4 932 34] Inv1.inv result }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module CargoDir_Impl3_Pop_Interface
  type v
  use seq.Seq
  use prelude.Borrow
  use seq_ext.SeqExt
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = v
  clone CargoDir_Impl2_ShallowModel_Stub as ShallowModel1 with
    type v = v
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v)
  val pop [#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 4 98 30] (self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v)) : v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 20 98 24] Inv0.inv self}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 96 14 96 32] result = Seq.get (ShallowModel0.shallow_model self) 0 }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 97 4 97 72] Seq.(==) (ShallowModel1.shallow_model ( ^ self)) (SeqExt.subsequence (ShallowModel1.shallow_model ( * self)) 1 (Seq.length (ShallowModel1.shallow_model ( * self)))) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 29 98 30] Inv1.inv result }
    
end
module CargoDir_Impl3_Pop
  type v
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use seq_ext.SeqExt
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v))
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = v,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = CargoDir_Node_Type.t_node v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CargoDir_Impl1_ShallowModel as ShallowModel3 with
    type v = v
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel0 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CargoDir_Impl2_ShallowModel as ShallowModel2 with
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel1 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = CargoDir_Node_Type.t_node v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv3.inv
  clone Core_Option_Impl0_Take_Interface as Take0 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v)
  let rec cfg pop [#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 4 98 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v)) : v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 20 98 24] Inv2.inv self}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 96 14 96 32] result = Seq.get (ShallowModel1.shallow_model self) 0 }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 97 4 97 72] Seq.(==) (ShallowModel2.shallow_model ( ^ self)) (SeqExt.subsequence (ShallowModel2.shallow_model ( * self)) 1 (Seq.length (ShallowModel2.shallow_model ( * self)))) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 98 29 98 30] Inv4.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : v;
  var self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v) = self;
  var pre : Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v);
  var h : CargoDir_Node_Type.t_node v;
  var _7 : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
  var _8 : borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v));
  {
    goto BB0
  }
  BB0 {
    pre <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 104 18 104 31] Ghost.new ( * self));
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] Inv0.inv pre };
    assume { Resolve0.resolve pre };
    _8 <- Borrow.borrow_mut (CargoDir_LinkedList_Type.linkedlist_head ( * self));
    self <- { self with current = (let CargoDir_LinkedList_Type.C_LinkedList a =  * self in CargoDir_LinkedList_Type.C_LinkedList ( ^ _8)) };
    assume { Inv1.inv ( ^ _8) };
    _7 <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 105 16 105 32] Take0.take _8);
    _8 <- any borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v));
    goto BB2
  }
  BB2 {
    h <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 105 16 105 41] Unwrap0.unwrap _7);
    _7 <- any Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
    goto BB3
  }
  BB3 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 107 8 115 10] let CargoDir_Node_Type.C_Node v next = h in Seq.(==) (ShallowModel0.shallow_model h) (Seq.(++) (Seq.singleton v) (match (next) with
      | Core_Option_Option_Type.C_Some n -> ShallowModel0.shallow_model n
      | Core_Option_Option_Type.C_None -> Seq.empty 
      end)) };
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    self <- { self with current = (let CargoDir_LinkedList_Type.C_LinkedList a =  * self in CargoDir_LinkedList_Type.C_LinkedList (CargoDir_Node_Type.node_next h)) };
    h <- (let CargoDir_Node_Type.C_Node a b = h in CargoDir_Node_Type.C_Node a (any Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)));
    assert { [@expl:type invariant] Inv1.inv (CargoDir_LinkedList_Type.linkedlist_head ( * self)) };
    assume { Resolve1.resolve (CargoDir_LinkedList_Type.linkedlist_head ( * self)) };
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve2.resolve self };
    goto BB7
  }
  BB7 {
    _0 <- CargoDir_Node_Type.node_v h;
    h <- (let CargoDir_Node_Type.C_Node a b = h in CargoDir_Node_Type.C_Node (any v) b);
    assert { [@expl:type invariant] Inv3.inv h };
    assume { Resolve3.resolve h };
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/root/creusot/creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"/root/creusot/creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CargoDir_Impl3_Push_Interface
  type v
  use prelude.Borrow
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CargoDir_Impl2_ShallowModel_Stub as ShallowModel0 with
    type v = v
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = v
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v)
  val push [#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 4 142 32] (self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v)) (v : v) : ()
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 21 142 25] Inv0.inv self}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 27 142 28] Inv1.inv v}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 141 4 141 67] Seq.(==) (ShallowModel0.shallow_model ( ^ self)) (Seq.(++) (Seq.singleton v) (ShallowModel0.shallow_model ( * self))) }
    
end
module CargoDir_Impl3_Push
  type v
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = CargoDir_Node_Type.t_node v
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v))
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = v,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist v),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CargoDir_Impl1_ShallowModel as ShallowModel2 with
    type v = v
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel0 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CargoDir_Impl2_ShallowModel as ShallowModel3 with
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone CargoDir_Impl0_New_Interface as New0 with
    type v = v,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate Inv2.inv = Inv5.inv
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel1 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Core_Option_Impl0_Take_Interface as Take0 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v)
  let rec cfg push [#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 4 142 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v)) (v : v) : ()
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 21 142 25] Inv2.inv self}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 142 27 142 28] Inv3.inv v}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 141 4 141 67] Seq.(==) (ShallowModel3.shallow_model ( ^ self)) (Seq.(++) (Seq.singleton v) (ShallowModel3.shallow_model ( * self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (CargoDir_LinkedList_Type.t_linkedlist v) = self;
  var v : v = v;
  var pre : Ghost.ghost_ty (CargoDir_LinkedList_Type.t_linkedlist v);
  var next : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
  var _7 : borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v));
  var n : CargoDir_Node_Type.t_node v;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    pre <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 144 18 144 31] Ghost.new ( * self));
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] Inv0.inv pre };
    assume { Resolve0.resolve pre };
    _7 <- Borrow.borrow_mut (CargoDir_LinkedList_Type.linkedlist_head ( * self));
    self <- { self with current = (let CargoDir_LinkedList_Type.C_LinkedList a =  * self in CargoDir_LinkedList_Type.C_LinkedList ( ^ _7)) };
    assume { Inv1.inv ( ^ _7) };
    next <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 145 19 145 35] Take0.take _7);
    _7 <- any borrowed (Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v));
    goto BB3
  }
  BB3 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 147 12 150 13] match (next) with
      | Core_Option_Option_Type.C_Some n -> Seq.(==) (ShallowModel0.shallow_model n) (ShallowModel1.shallow_model pre)
      | Core_Option_Option_Type.C_None -> true
      end };
    goto BB4
  }
  BB4 {
    n <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 152 16 152 34] New0.new v next);
    v <- any v;
    next <- any Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
    goto BB5
  }
  BB5 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 153 8 161 10] let CargoDir_Node_Type.C_Node vv next = n in Seq.(==) (ShallowModel2.shallow_model n) (Seq.(++) (Seq.singleton vv) (match (next) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some nn -> ShallowModel2.shallow_model nn
      end)) };
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    self <- { self with current = (let CargoDir_LinkedList_Type.C_LinkedList a =  * self in CargoDir_LinkedList_Type.C_LinkedList (Core_Option_Option_Type.C_Some n)) };
    n <- any CargoDir_Node_Type.t_node v;
    goto BB11
  }
  BB11 {
    assert { [@expl:type invariant] Inv2.inv self };
    assume { Resolve1.resolve self };
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 163 8 175 10] let CargoDir_LinkedList_Type.C_LinkedList head =  * self in match (head) with
      | Core_Option_Option_Type.C_Some n1 -> let CargoDir_Node_Type.C_Node v next = n1 in Seq.(==) (ShallowModel0.shallow_model n1) (Seq.(++) (Seq.singleton v) (match (next) with
        | Core_Option_Option_Type.C_Some n2 -> ShallowModel0.shallow_model n2
        | Core_Option_Option_Type.C_None -> Seq.empty 
        end))
      | Core_Option_Option_Type.C_None -> true
      end };
    _0 <- ();
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module CargoDir_Impl3_Index_Interface
  type v
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use seq.Seq
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = v
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v
  val index [#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 4 181 40] (self : CargoDir_LinkedList_Type.t_linkedlist v) (ix : usize) : v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 178 15 178 32] UIntSize.to_int ix < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 179 15 179 44] 0 <= UIntSize.to_int ix /\ UIntSize.to_int ix < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 18 181 22] Inv0.inv self}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 180 14 180 35] result = Seq.get (ShallowModel0.shallow_model self) (UIntSize.to_int ix) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 38 181 40] Inv1.inv result }
    
end
module CargoDir_Impl3_Index
  type v
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use seq_ext.SeqExt
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = v
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = v,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use CargoDir_Node_Type as CargoDir_Node_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = CargoDir_Node_Type.t_node v
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = CargoDir_Node_Type.t_node v
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = CargoDir_Node_Type.t_node v,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use seq.Seq
  clone CargoDir_Impl1_ShallowModel as ShallowModel2 with
    type v = v
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel3 with
    type t = CargoDir_Node_Type.t_node v,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CargoDir_Impl2_ShallowModel as ShallowModel4 with
    type v = v,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = CargoDir_Node_Type.t_node v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = CargoDir_Node_Type.t_node v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v)
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = CargoDir_LinkedList_Type.t_linkedlist v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = CargoDir_Node_Type.t_node v,
    type ShallowModelTy0.shallowModelTy = Seq.seq v,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = CargoDir_LinkedList_Type.t_linkedlist v
  let rec cfg index [#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 4 181 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : CargoDir_LinkedList_Type.t_linkedlist v) (ix : usize) : v
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 178 15 178 32] UIntSize.to_int ix < Seq.length (ShallowModel1.shallow_model self)}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 179 15 179 44] 0 <= UIntSize.to_int ix /\ UIntSize.to_int ix < Seq.length (ShallowModel1.shallow_model self)}
    requires {[#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 18 181 22] Inv0.inv self}
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 180 14 180 35] result = Seq.get (ShallowModel1.shallow_model self) (UIntSize.to_int ix) }
    ensures { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 181 38 181 40] Inv4.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : v;
  var self : CargoDir_LinkedList_Type.t_linkedlist v = self;
  var ix : usize = ix;
  var cur : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
  var i : usize;
  var c : CargoDir_Node_Type.t_node v;
  var next : Core_Option_Option_Type.t_option (CargoDir_Node_Type.t_node v);
  var _19 : CargoDir_Node_Type.t_node v;
  var c1 : CargoDir_Node_Type.t_node v;
  var v : v;
  var _31 : CargoDir_Node_Type.t_node v;
  {
    goto BB0
  }
  BB0 {
    cur <- CargoDir_LinkedList_Type.linkedlist_head self;
    assert { [@expl:type invariant] Inv0.inv self };
    assume { Resolve0.resolve self };
    i <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 183 27 183 28] (0 : usize));
    goto BB1
  }
  BB1 {
    invariant { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 184 20 184 40] 0 <= UIntSize.to_int i /\ UIntSize.to_int i <= UIntSize.to_int ix };
    invariant { [#"/root/milli/creusot/cargo-dir/src/lib.rs" 185 20 188 9] match (cur) with
      | Core_Option_Option_Type.C_Some c -> Seq.(==) (ShallowModel0.shallow_model c) (SeqExt.subsequence (ShallowModel1.shallow_model self) (UIntSize.to_int i) (Seq.length (ShallowModel1.shallow_model self)))
      | Core_Option_Option_Type.C_None -> false
      end };
    goto BB2
  }
  BB2 {
    switch ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 189 14 189 20] i < ix)
      | False -> goto BB8
      | True -> goto BB3
      end
  }
  BB3 {
    switch (cur)
      | Core_Option_Option_Type.C_None -> goto BB4
      | Core_Option_Option_Type.C_Some _ -> goto BB5
      end
  }
  BB4 {
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    absurd
  }
  BB5 {
    goto BB7
  }
  BB6 {
    absurd
  }
  BB7 {
    c <- Core_Option_Option_Type.some_0 cur;
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    _19 <- c;
    assert { [@expl:type invariant] Inv2.inv c };
    assume { Resolve2.resolve c };
    next <- CargoDir_Node_Type.node_next _19;
    assert { [@expl:type invariant] Inv3.inv _19 };
    assume { Resolve3.resolve _19 };
    assert { [@expl:type invariant] Inv1.inv next };
    assume { Resolve1.resolve next };
    cur <- next;
    i <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 197 12 197 18] i + ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 197 17 197 18] (1 : usize)));
    goto BB1
  }
  BB8 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 201 22 204 9] match (cur) with
      | Core_Option_Option_Type.C_Some c -> Seq.(==) (ShallowModel0.shallow_model c) (SeqExt.subsequence (ShallowModel1.shallow_model self) (UIntSize.to_int i) (Seq.length (ShallowModel1.shallow_model self)))
      | Core_Option_Option_Type.C_None -> false
      end };
    switch (cur)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB9 {
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    absurd
  }
  BB10 {
    goto BB11
  }
  BB11 {
    c1 <- Core_Option_Option_Type.some_0 cur;
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 207 16 215 18] let CargoDir_Node_Type.C_Node vv next = c1 in Seq.(==) (ShallowModel0.shallow_model c1) (Seq.(++) (Seq.singleton vv) (match (next) with
      | Core_Option_Option_Type.C_None -> Seq.empty 
      | Core_Option_Option_Type.C_Some nn -> ShallowModel2.shallow_model nn
      end)) };
    _31 <- c1;
    assert { [@expl:type invariant] Inv2.inv c1 };
    assume { Resolve2.resolve c1 };
    v <- CargoDir_Node_Type.node_v _31;
    assert { [@expl:type invariant] Inv3.inv _31 };
    assume { Resolve3.resolve _31 };
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 218 30 218 73] v = Seq.get (SeqExt.subsequence (ShallowModel1.shallow_model self) (UIntSize.to_int i) (Seq.length (ShallowModel1.shallow_model self))) 0 };
    _0 <- v;
    assert { [@expl:type invariant] Inv4.inv v };
    assume { Resolve4.resolve v };
    return _0
  }
  BB13 {
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    goto BB6
  }
  BB14 {
    assert { [@expl:type invariant] Inv1.inv cur };
    assume { Resolve1.resolve cur };
    goto BB6
  }
  
end
module CargoDir_Main_Interface
  val main [#"/root/milli/creusot/cargo-dir/src/lib.rs" 227 0 227 9] (_1 : ()) : ()
end
module CargoDir_Main
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use seq.Seq
  use CargoDir_Node_Type as CargoDir_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CargoDir_Impl1_ShallowModel as ShallowModel3 with
    type v = int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = int32,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use CargoDir_LinkedList_Type as CargoDir_LinkedList_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist int32)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed (CargoDir_LinkedList_Type.t_linkedlist int32),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist int32
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = CargoDir_LinkedList_Type.t_linkedlist int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Boxed_Impl1_ShallowModel as ShallowModel1 with
    type t = CargoDir_Node_Type.t_node int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    type ShallowModelTy0.shallowModelTy = Seq.seq int32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CargoDir_Impl2_ShallowModel as ShallowModel0 with
    type v = int32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = CargoDir_LinkedList_Type.t_linkedlist int32,
    type ShallowModelTy0.shallowModelTy = Seq.seq int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CargoDir_Impl3_Pop_Interface as Pop0 with
    type v = int32,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate Inv1.inv = Inv2.inv
  clone CargoDir_Impl3_Push_Interface as Push0 with
    type v = int32,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CargoDir_Impl3_New_Interface as New0 with
    type v = int32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv
  let rec cfg main [#"/root/milli/creusot/cargo-dir/src/lib.rs" 227 0 227 9] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l1 : CargoDir_LinkedList_Type.t_linkedlist int32;
  var _2 : ();
  var _3 : borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
  var _4 : ();
  var _5 : borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
  var _8 : int32;
  var _9 : borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
  {
    goto BB0
  }
  BB0 {
    l1 <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 228 17 228 34] New0.new ());
    goto BB1
  }
  BB1 {
    _3 <- Borrow.borrow_mut l1;
    l1 <-  ^ _3;
    _2 <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 229 4 229 14] Push0.push _3 ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 229 12 229 13] (1 : int32)));
    _3 <- any borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
    goto BB2
  }
  BB2 {
    _5 <- Borrow.borrow_mut l1;
    l1 <-  ^ _5;
    _4 <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 230 4 230 14] Push0.push _5 ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 230 12 230 13] (0 : int32)));
    _5 <- any borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
    goto BB3
  }
  BB3 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 231 18 231 32] Seq.length (ShallowModel0.shallow_model l1) = 2 };
    goto BB4
  }
  BB4 {
    _9 <- Borrow.borrow_mut l1;
    l1 <-  ^ _9;
    _8 <- ([#"/root/milli/creusot/cargo-dir/src/lib.rs" 232 12 232 20] Pop0.pop _9);
    _9 <- any borrowed (CargoDir_LinkedList_Type.t_linkedlist int32);
    goto BB5
  }
  BB5 {
    assert { [@expl:assertion] [#"/root/milli/creusot/cargo-dir/src/lib.rs" 233 18 233 32] Seq.length (ShallowModel0.shallow_model l1) = 1 };
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CargoDir_Impl1
  type v
end
module CargoDir_Impl2
  type v
end
